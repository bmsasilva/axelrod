# -------------------------------------------------------------------------- #
# Match
# -------------------------------------------------------------------------- #

# Simulates a n-rounds match between two algos.

Match = function(fa, fb, n = 200, t = 5, r = 3, p = 1, s = 0) {
	if(! is.function(fa) | ! is.function(fb))
		stop("'fa' and 'fb' must be functions")
	ma <- mb <- logical(0)
	pa <- pb <- numeric(0)
	for(i in 1:n) {
		mai <- fa(ma, mb)
		mbi <- fb(mb, ma)
		if(length(mai) != 1) stop("fa as failed")
		if(length(mbi) != 1) stop("fb as failed")
		if(! mai %in% c(TRUE, FALSE)) stop("fa as failed")
		if(! mbi %in% c(TRUE, FALSE)) stop("fb as failed")
		ma[i] <- mai
		mb[i] <- mbi
		if(mai & mbi) {
			pa <- c(pa, r)
			pb <- c(pb, r)
		}
		if(!mai & !mbi) {
			pa <- c(pa, p)
			pb <- c(pb, p)
		}
		if(!mai & mbi) {
			pa <- c(pa, t)
			pb <- c(pb, s)
		}
		if(mai & !mbi) {
			pa <- c(pa, s)
			pb <- c(pb, t)
		}
	}
	moves <- data.frame(a = ma, b = mb)
	gains <- data.frame(a = pa, b = pb)
	list(moves = moves, gains = gains)
}


# -------------------------------------------------------------------------- #
# Tournament
# -------------------------------------------------------------------------- # 

Tournament = function(comp, n = 200, t = 5, r = 3, p = 1, s = 0) {
	N <- length(comp)
	nms <- names(comp)
	I <- gtools:::combinations(N, 2)
	scores <- list()
	length(scores) <- length(comp)
	names(scores) <- nms
	for(i in 1:nrow(I)) {
		j <- I[i, 1]
		k <- I[i, 2]
		ans <- Match(comp[[j]], comp[[k]], n, t, r, p, s)
		scr <- unname(colSums(ans$gains))
		scores[[nms[j]]] <- c(scores[[nms[j]]], scr[1])
		scores[[nms[k]]] <- c(scores[[nms[k]]], scr[2])
	}
	sapply(scores, mean)
}
